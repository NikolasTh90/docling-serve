FROM python:3.11-slim

WORKDIR /app

# Section 1: OCR Setup
# Install build tools & libs
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    git \
    pkg-config \
    libtool \
    autoconf \
    automake \
    libpng-dev \
    libjpeg-dev \
    libtiff-dev \
    libgif-dev \
    libwebp-dev \
    libopenjp2-7-dev \
    zlib1g-dev \
    liblcms2-dev \
    libicu-dev \
    libpango1.0-dev \
    libcairo2-dev \
    curl \
    wget \
    sudo \
    unpaper \
    vim \
    autotools-dev \
    automake \
    libtool \
    libleptonica-dev \
    pkg-config \
    python3 \
    python3-pip

# Copy build script and make it executable
COPY build_tesseract.sh /usr/local/bin/build_tesseract.sh
RUN chmod +x /usr/local/bin/build_tesseract.sh

# Build and install Tesseract with Arabic and Greek language support
RUN echo y | /usr/local/bin/build_tesseract.sh -v 5.5.1 -l eng,ara,ell --jobs 12


# Install GNU Autoconf ≥2.72 from source (so jbig2enc’s autogen works)
RUN apt-get update && apt-get install -y wget \
 && wget https://ftp.gnu.org/gnu/autoconf/autoconf-2.72.tar.gz \
 && tar xzf autoconf-2.72.tar.gz \
 && cd autoconf-2.72 \
 && ./configure --prefix=/usr/local \
 && make -j$(nproc) \
 && make install \
 && cd .. \
 && rm -rf autoconf-2.72* autoconf-2.72.tar.gz

# Install jbig2 encoder
RUN  git clone https://github.com/agl/jbig2enc.git \
    && cd jbig2enc \
    && ./autogen.sh \
    && ./configure \
    && make -j$(nproc) \
    && make install \
    && cd .. \
    && rm -rf jbig2enc

# Install Ghostscript from source
RUN curl -L https://github.com/ArtifexSoftware/ghostpdl-downloads/releases/download/gs10051/ghostscript-10.05.1.tar.gz | tar xz \
 && cd ghostscript-10.05.1 \
 && ./configure --without-x \
 && make -j$(nproc) \
 && make install \
 && cd .. \
 && rm -rf ghostscript-10.05.1

# Install Rust toolchain
RUN curl https://sh.rustup.rs -sSf | sh -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"

# Fetch pngquant source
RUN git clone --recursive https://github.com/kornelski/pngquant.git /tmp/pngquant

# Compile pngquant with Rust and lcms2
RUN cd /tmp/pngquant \
    && cargo build --release --features=lcms2

# Install pngquant binary & cleanup
RUN install -m755 /tmp/pngquant/target/release/pngquant /usr/local/bin/ \
    && rm -rf /tmp/pngquant ~/.cargo
# Install UV package manager for faster dependency resolution
RUN pip install --upgrade setuptools[core]
RUN pip install uv

# Set Tesseract data path
ENV TESSDATA_PREFIX="/usr/local/share/tessdata/"

# Expose port
EXPOSE 5001

# # Section 2: Ollama Setup
# RUN curl -fsSL https://ollama.com/install.sh | sh
# ENV OLLAMA_HOST=0.0.0.0:11434
# ENV OLLAMA_MODELS=/workspace/models
# EXPOSE 11434

# OPTIMIZATION: First copy only pyproject.toml and install dependencies
COPY pyproject.toml /app/
# Create a proper virtual environment and activate it
RUN uv venv /app/.venv
ENV VIRTUAL_ENV=/app/.venv
ENV PATH="/app/.venv/bin:$PATH"

# Install dependencies into the virtual environment
RUN uv sync --extra ui

COPY . /app

CMD ["docling-serve", "run", "--host", "127.0.0.1", "--port", "5001", "--enable-ui"]

